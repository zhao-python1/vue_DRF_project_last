"""
Django settings for edu_project project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import datetime
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
#根目录
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# 修改默认的子应用的目录后，需要将该目录设置为全局的导包路径
import sys
sys.path.insert(0,os.path.join(BASE_DIR,"apps"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = '#9s^zvunplvz+c%c=nw42n&6ei2^sver@9__(d^-uabpv1ogdm'
# SECRET_KEY = '#9s^zvunplvz+c%c=nw42n&6ei2^sver@9__(d^-uabpv1ogdm'
SECRET_KEY = '#9s^zvunplvz+c%c=nw42n&6ei2^sver@9__(d^-uabpv1ogdm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
       "api.baizhis.com",
       "www.baizhis.com",

]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'xadmin',
    'crispy_forms',
    'reversion',
    'first_one',
    'user',
    'course',
    'shop',
    'sel',
    'payments',
    'django_filters',
    # 富文本编辑器配置
    'ckeditor',  # 富文本编辑器
    'ckeditor_uploader',  # 富文本编辑器的上传模块

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'edu_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'edu_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'api4',  # 库名
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'USER': 'root',
        'PASSWORD': '123456',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = "/media/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# 允许跨域请求
CORS_ORIGIN_ALLOW_ALL = True


# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/lesson_api.log"),
            'maxBytes': 100 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    # 日志对象
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'propagate': True,  # 是否让日志信息继续冒泡给其他的日志处理系统
        },
    }
}
#def 默认配置
REST_FRAMEWORK = {
    #全局异常配置
    "EXCEPTION_HANDLER":"utils.exceptions.exception_handler",
    # 添加认证方式
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
}





# jwt配置
JWT_AUTH = {
    # 有效de1时间长度
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=10800),
    # 自定义jwt返回值的方法和格式
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'user.utils.jwt_response_payload_handler',
}

#注册自定义用户模性 格式必叙事app 表明

AUTH_USER_MODEL = "user.Logininfo"


#自定义多条用户登录
AUTHENTICATION_BACKENDS = [
    'user.utils.UserA',
]

CACHES = {
    # 默认库
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        # 连接的redis所在服务的端口以及ip
        "LOCATION": "redis://127.0.0.1:6379/0",
        # 使用客户端的方式
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 验证码储存位置
    "sms_code": {
        "BACKEND": "django_redis.cache.RedisCache",
        # 连接的redis所在服务的端口以及ip
        "LOCATION": "redis://127.0.0.1:6379/10",
        # 使用客户端的方式
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },

# 购物车的储存位置
    "cart": {
        "BACKEND": "django_redis.cache.RedisCache",
        # 连接的redis所在服务的端口以及ip
        "LOCATION": "redis://127.0.0.1:6379/11",
        # 使用客户端的方式
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}

# devlope 配置
KEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',	# 展示哪些工具栏
        'height': 300,	# 编辑器的高度
        'width': 300,
    },
}
CKEDITOR_UPLOAD_PATH = ''



# 支付宝参数配置
# 支付宝配置信息
ALIAPY_CONFIG = {
    # "gateway_url": "https://openapi.alipay.com/gateway.do?", # 真实支付宝网关地址  上线之后的
    "gateway_url": "https://openapi.alipaydev.com/gateway.do?",  # 沙箱支付宝网关地址
    "appid": "2016102700769409",
    "app_notify_url": None,
    "app_private_key_path": open(os.path.join(BASE_DIR, "apps/payments/keys/app_private_key.pem")).read(),
    "alipay_public_key_path": open(os.path.join(BASE_DIR, "apps/payments/keys/app_private_key.pem")).read(),
    "sign_type": "RSA2",
    "debug": False,
    # "return_url": "http://www.baizhistore.cn:8080/payments/result",  # 同步回调地址
    "return_url": "http://localhost:8080/payments/result",  # 同步回调地址
    "notify_url": "http://api.baizhis.com:9001/payments/result",  # 异步结果通知api.baizhis.com
}


#
# #  #通过celery异步执行短信的服务
#             # from my_job.my_sms.tasks import send_sms
#             # send_sms.delay(mobile, code) #如果需要参数传递过去 不需要则不传递
#             message = Message(constants.API_KEY)
#             message.send_message(mobile,code)